"use strict";
// SPDX-License-Identifier: MIT
// Copyright (c) 2020 Daimler TSS GmbH
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var lodash_1 = require("lodash");
var React = require("react");
var serviceIds_1 = require("../../core/serviceIds");
var BindToDi_1 = require("../../di/component/BindToDi");
var inject_1 = require("../../di/hoc/inject");
var withInject_1 = require("../../di/hoc/withInject");
var Url_1 = require("../../util/Url");
var Router_1 = require("../lib/Router");
var RouterService_1 = require("../lib/RouterService");
var Route = /** @class */ (function (_super) {
    tslib_1.__extends(Route, _super);
    function Route(props) {
        var _this = _super.call(this, props) || this;
        _this.bindService = lodash_1.once(function (container) {
            var routerService = new RouterService_1.RouterService(_this.router, _this.urlFormatStrategy);
            container.bind(RouterService_1.RouterService).toConstantValue(routerService);
        });
        _this.setupRoutes = lodash_1.once(function () {
            _this.routes.map(function (route) {
                _this.router.addRoute(route.name, route.pattern, route.component, route.forceRemount);
            });
        });
        _this.hashChange = function () {
            var url = _this.urlFormatStrategy.extract(document.location.hash) || '/';
            _this.navigate(Url_1.default.buildPathFromSegments(Url_1.default.extractPath(url)), Url_1.default.extractQuery(url));
        };
        _this.router = new Router_1.default();
        _this.hashChangeHandler = _this.hashChange.bind(_this);
        return _this;
    }
    Route.prototype.componentDidMount = function () {
        this.hashChange();
        window.addEventListener('hashchange', this.hashChangeHandler);
    };
    Route.prototype.componentWillUnmount = function () {
        window.removeEventListener('hashchange', this.hashChangeHandler);
    };
    Route.prototype.render = function () {
        if (this.props.children) {
            console.error('React children composition error: Route is not supposed to have children.');
        }
        this.setupRoutes();
        var activeRoute = this.router.getActiveRoute();
        if (!activeRoute) {
            return null;
        }
        return (React.createElement(BindToDi_1.default, { services: this.bindService },
            React.createElement(activeRoute.component, { key: activeRoute.forceRemount ? activeRoute.url : activeRoute.pattern, url: activeRoute.url })));
    };
    Route.prototype.navigate = function (path, query) {
        if (query === void 0) { query = {}; }
        this.router.navigate(path, query);
        this.forceUpdate();
    };
    tslib_1.__decorate([
        inject_1.default(serviceIds_1.default.routes),
        tslib_1.__metadata("design:type", Array)
    ], Route.prototype, "routes", void 0);
    tslib_1.__decorate([
        inject_1.default(serviceIds_1.default.routerUrlFormatStrategy),
        tslib_1.__metadata("design:type", Object)
    ], Route.prototype, "urlFormatStrategy", void 0);
    return Route;
}(React.Component));
exports.default = withInject_1.default(Route);
//# sourceMappingURL=Route.js.map