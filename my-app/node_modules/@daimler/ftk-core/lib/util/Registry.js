"use strict";
// SPDX-License-Identifier: MIT
// Copyright (c) 2020 Daimler TSS GmbH
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = require("lodash");
/**
 * @class Registry
 */
var Registry = /** @class */ (function () {
    /**
     * @constructor
     */
    function Registry() {
        this.keyValueMap = {};
        this.keyCount = 0;
    }
    /**
     * @param id
     * @param data
     * @returns {Registry}
     */
    Registry.prototype.add = function (id, data) {
        if (this.has(id) === false) {
            this.keyCount++;
        }
        this.keyValueMap[id] = data;
        return id;
    };
    /**
     * @param id
     * @returns {Registry}
     */
    Registry.prototype.remove = function (id) {
        if (lodash_1.isUndefined(this.keyValueMap[id])) {
            throw new Error("Registry: Unknown id " + id + ".");
        }
        delete this.keyValueMap[id];
        this.keyCount--;
        return this;
    };
    /**
     * @param id
     * @returns {object}
     */
    Registry.prototype.get = function (id) {
        if (lodash_1.isUndefined(this.keyValueMap[id])) {
            throw new Error("Registry: Unknown id " + id + ".");
        }
        return this.keyValueMap[id];
    };
    /**
     * @param {(value: T, index: string) => void} callback
     */
    Registry.prototype.forEach = function (callback) {
        var _this = this;
        lodash_1.keys(this.keyValueMap).map(function (key) {
            callback(_this.get(key), key);
        });
    };
    /**
     * @param id
     * @returns {boolean}
     */
    Registry.prototype.has = function (id) {
        return !lodash_1.isUndefined(this.keyValueMap[id]);
    };
    /**
     * @returns {Registry}
     */
    Registry.prototype.clear = function () {
        this.keyValueMap = {};
        this.keyCount = 0;
        return this;
    };
    /**
     * @returns {number}
     */
    Registry.prototype.getCount = function () {
        return this.keyCount;
    };
    /**
     * @returns {string[]}
     */
    Registry.prototype.getKeys = function () {
        return lodash_1.keys(this.keyValueMap);
    };
    return Registry;
}());
exports.Registry = Registry;
exports.default = Registry;
//# sourceMappingURL=Registry.js.map