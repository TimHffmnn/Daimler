import { interfaces } from 'inversify';
import * as React from 'react';
import { IDiContainer } from '..';
import { ConfigService } from '../config/lib/ConfigService';
import { ErrorHandler } from '../errorHandler/lib/ErrorHandler';
import { I18nService } from '../i18n/lib/I18nService';
import { InterconnectionService } from '../interconnection/InterconnectionService';
import { RouterService } from '../router/lib/RouterService';
export declare function useFromDi<T>(serviceId: string | symbol | interfaces.Newable<T>): T;
export declare const useConfig: () => ConfigService;
export declare const useDi: () => IDiContainer;
export declare const useErrorHandler: () => ErrorHandler;
export declare const useI18n: () => I18nService;
export declare const useInterconnection: () => InterconnectionService;
export declare const useRouter: () => RouterService;
/**
 * Compat/shim for backwards compatibility when using Hooks API.
 * @deprecated
 */
export declare function withFtk<TProps extends {}>(InnerComponent: React.ComponentType<TProps>): React.ComponentType<TProps>;
