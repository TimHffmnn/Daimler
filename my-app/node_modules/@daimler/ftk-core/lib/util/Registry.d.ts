/**
 * @class Registry
 */
export declare class Registry<T> {
    /**
     * @protected
     * @type {*}
     */
    protected keyValueMap: any;
    /**
     * @protected
     * @type {number}
     */
    protected keyCount: number;
    /**
     * @constructor
     */
    constructor();
    /**
     * @param id
     * @param data
     * @returns {Registry}
     */
    add(id: string, data: T): string;
    /**
     * @param id
     * @returns {Registry}
     */
    remove(id: string): Registry<T>;
    /**
     * @param id
     * @returns {object}
     */
    get(id: string): T;
    /**
     * @param {(value: T, index: string) => void} callback
     */
    forEach(callback: (value: T, index: string) => void): void;
    /**
     * @param id
     * @returns {boolean}
     */
    has(id: string): boolean;
    /**
     * @returns {Registry}
     */
    clear(): Registry<T>;
    /**
     * @returns {number}
     */
    getCount(): number;
    /**
     * @returns {string[]}
     */
    getKeys(): string[];
}
export default Registry;
