"use strict";
// SPDX-License-Identifier: MIT
// Copyright (c) 2020 Daimler TSS GmbH
Object.defineProperty(exports, "__esModule", { value: true });
var pathToRegexp = require("path-to-regexp");
/**
 * A helper class to handle route pattern and parse routes.
 *
 * @class RouteParser
 * @param route: string
 */
var RouteParser = /** @class */ (function () {
    function RouteParser(route) {
        var _this = this;
        /**
         * Get the route pattern, which is set by creating an insance of this class.
         *
         * @name getRouteString
         * @return string
         */
        this.getRouteString = function () {
            return _this.routePattern;
        };
        /**
         * Compare the path string with the route pattern.
         * If it matches, return a parameter object according the route pattern.
         * If the route pattern doesn't match the given path, return false.
         *
         * @name match
         * @param path: string
         * @return object | boolean
         */
        this.match = function (path) {
            var pathQuerySplit = path.split('?');
            var pathWithoutQuery = pathQuerySplit[0];
            var keys = [];
            var patternRegExp = pathToRegexp(_this.routePattern, keys);
            if (patternRegExp.test(pathWithoutQuery)) {
                var _a = patternRegExp.exec(pathWithoutQuery), _1 = _a[0], parameterValues_1 = _a.slice(1);
                var parameterObj = keys.reduce(function (buffer, currentKey, index) {
                    buffer[currentKey.name] = parameterValues_1[index];
                    return buffer;
                }, {});
                return parameterObj;
            }
            return false;
        };
        /**
         * Create a path string according the route pattern and the given parameter.
         *
         * @name createPathString
         * @param parameter: { [key: string]: string }
         * @return string
         */
        this.createPathString = function (parameter) {
            if (parameter === void 0) { parameter = {}; }
            var generator = pathToRegexp.compile(_this.routePattern);
            var path = generator(parameter);
            return path;
        };
        this.routePattern = route;
    }
    return RouteParser;
}());
exports.RouteParser = RouteParser;
//# sourceMappingURL=RouteParser.js.map