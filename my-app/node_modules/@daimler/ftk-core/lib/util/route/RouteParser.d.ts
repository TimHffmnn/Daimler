import { RouteParameter } from '../../router/lib/interface/IRoute';
import { IRouteParser } from './interface/IRouteParser';
/**
 * A helper class to handle route pattern and parse routes.
 *
 * @class RouteParser
 * @param route: string
 */
export declare class RouteParser implements IRouteParser {
    private routePattern;
    constructor(route: string);
    /**
     * Get the route pattern, which is set by creating an insance of this class.
     *
     * @name getRouteString
     * @return string
     */
    getRouteString: () => string;
    /**
     * Compare the path string with the route pattern.
     * If it matches, return a parameter object according the route pattern.
     * If the route pattern doesn't match the given path, return false.
     *
     * @name match
     * @param path: string
     * @return object | boolean
     */
    match: (path: string) => boolean | RouteParameter;
    /**
     * Create a path string according the route pattern and the given parameter.
     *
     * @name createPathString
     * @param parameter: { [key: string]: string }
     * @return string
     */
    createPathString: (parameter?: RouteParameter) => string;
}
