"use strict";
// SPDX-License-Identifier: MIT
// Copyright (c) 2020 Daimler TSS GmbH
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * URLHelper class for working with URLs. It contains methods for working with parameters and queries.
 * URLHelper uses ES6 URL API (https://developer.mozilla.org/en-US/docs/Web/API/URL/URL, https://url.spec.whatwg.org/#constructors),
 * which is a URL object (created by new URL) representing the URL defined by the parameters.
 */
var UrlHelper = /** @class */ (function () {
    function UrlHelper(url, base) {
        var _this = this;
        if (url === void 0) { url = ''; }
        if (base === void 0) { base = window.location.origin; }
        this.getHref = function () {
            return _this.url.href;
        };
        this.getPath = function () {
            var urlObj = _this.url;
            return urlObj.pathname;
        };
        this.getOrigin = function () {
            return _this.url.origin;
        };
        this.getSegments = function () {
            var path = _this.url.pathname;
            return path.split('/');
        };
        this.setSegmentsToString = function (segments) {
            return segments.join('/');
        };
        this.extractHash = function () {
            return _this.url.hash.replace('#!', '');
        };
        this.getQueryMap = function () {
            var urlObj = _this.url;
            var searchObj = {};
            urlObj.searchParams.forEach(function (value, key) {
                var valueArr = urlObj.searchParams.getAll(key);
                if (valueArr && valueArr.length) {
                    searchObj[key] = valueArr.length > 1 ? valueArr : valueArr[0];
                }
            });
            return searchObj;
        };
        this.setQueryString = function (queryObject) {
            if (queryObject === void 0) { queryObject = {}; }
            var urlObj = _this.url;
            var _loop_1 = function (key) {
                if (Object.prototype.hasOwnProperty.call(queryObject, key)) {
                    typeof queryObject[key] === 'object'
                        ? queryObject[key].forEach(function (element) {
                            urlObj.searchParams.append(key, element);
                        })
                        : urlObj.searchParams.append(key, queryObject[key]);
                }
            };
            for (var key in queryObject) {
                _loop_1(key);
            }
            return urlObj.search;
        };
        this.url = new URL(url, base);
    }
    return UrlHelper;
}());
exports.default = UrlHelper;
//# sourceMappingURL=UrlHelper.js.map