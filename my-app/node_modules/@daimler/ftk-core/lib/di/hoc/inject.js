"use strict";
// SPDX-License-Identifier: MIT
// Copyright (c) 2020 Daimler TSS GmbH
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
function inject(serviceId) {
    return function (target, propertyKey) {
        Object.defineProperty(target, propertyKey, {
            enumerable: true,
            configurable: true,
            get: function () {
                if (!this.props.container) {
                    throw new Error("Can't access injected property " + propertyKey + " on " + target + ", did you forget to wrap your component in withDi()?");
                }
                var container = this.props.container;
                if (serviceId !== undefined) {
                    if (container.isBound(serviceId)) {
                        return container.get(serviceId);
                    }
                    else {
                        throw new Error("Can't inject " + propertyKey + " as no dependency binding for " + serviceId.toString() + " could be found.");
                    }
                }
                else {
                    var keyFromMetadata = Reflect.getMetadata('design:type', target, propertyKey);
                    if (!keyFromMetadata) {
                        throw new Error("Can't inject " + propertyKey + " as no metadata could be found. Did you import reflect-metadata?");
                    }
                    if (!container.isBound(keyFromMetadata)) {
                        throw new Error("Can't inject " + propertyKey + " as no binding for type " + keyFromMetadata + " was found. Did you register it in the DiContainer?");
                    }
                    return container.get(keyFromMetadata);
                }
            },
        });
    };
}
exports.default = inject;
//# sourceMappingURL=inject.js.map