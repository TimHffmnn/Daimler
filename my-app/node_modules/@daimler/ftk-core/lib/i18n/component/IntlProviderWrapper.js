"use strict";
// SPDX-License-Identifier: MIT
// Copyright (c) 2020 Daimler TSS GmbH
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = require("react");
var react_intl_1 = require("react-intl");
var ConfigService_1 = require("../../config/lib/ConfigService");
var singleton_1 = require("../../di/hoc/singleton");
var withInject_1 = require("../../di/hoc/withInject");
var I18nProvider_1 = require("./I18nProvider");
// tslint:disable
require("intl-pluralrules");
require("@formatjs/intl-relativetimeformat/polyfill");
require("@formatjs/intl-relativetimeformat/dist/locale-data/de"); // Add locale data for de
require("@formatjs/intl-relativetimeformat/dist/locale-data/en"); // Add locale data for en
/**
 * This wrapper is mainly needed as the injectIntl() requires the defaultLocale to be set on
 * construction. So we have to know outside our Provider what locale to use before we can wrap it.
 */
var IntlProviderWrapper = /** @class */ (function (_super) {
    tslib_1.__extends(IntlProviderWrapper, _super);
    function IntlProviderWrapper() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            defaultLocale: undefined,
        };
        _this.setLang = function (lang) {
            _this.setState(function (prevState) { return (tslib_1.__assign({}, prevState, { defaultLocale: lang })); });
        };
        return _this;
    }
    IntlProviderWrapper.getDerivedStateFromProps = function (nextProps, prevState) {
        if (!prevState.defaultLocale) {
            var defaultLocale = 'en';
            try {
                defaultLocale = nextProps.container.get(ConfigService_1.ConfigService).getConfig().core.i18n.defaultLocale;
            }
            catch (err) {
                console.warn("Warning: no defaultLocale found in config - using '" + defaultLocale + "' as fallback");
            }
            return tslib_1.__assign({}, prevState, { defaultLocale: defaultLocale });
        }
        else {
            return prevState;
        }
    };
    IntlProviderWrapper.prototype.render = function () {
        var I18nProvider = withInject_1.default(react_intl_1.injectIntl(I18nProvider_1.default));
        return (React.createElement(react_intl_1.IntlProvider, { locale: this.state.defaultLocale, defaultLocale: this.state.defaultLocale },
            React.createElement(I18nProvider, { setLang: this.setLang, lang: this.state.defaultLocale }, this.props.children)));
    };
    return IntlProviderWrapper;
}(React.Component));
exports.default = singleton_1.default('ftk.core.intlwrapper', withInject_1.default(IntlProviderWrapper));
//# sourceMappingURL=IntlProviderWrapper.js.map