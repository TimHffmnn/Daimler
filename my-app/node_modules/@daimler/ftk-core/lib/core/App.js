"use strict";
// SPDX-License-Identifier: MIT
// Copyright (c) 2020 Daimler TSS GmbH
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var inversify_1 = require("inversify");
var lodash_1 = require("lodash");
var React = require("react");
var Provider_1 = require("../config/component/Provider");
var diContext_1 = require("../di/lib/diContext");
var Provider_2 = require("../errorHandler/component/Provider");
var IntlProviderWrapper_1 = require("../i18n/component/IntlProviderWrapper");
var registerDefaultDependencies_1 = require("./registerDefaultDependencies");
var registerSwidgetDependencies_1 = require("./registerSwidgetDependencies");
var serviceIds_1 = require("./serviceIds");
/**
 * Main entry point to a WebApp. Binds a new dependency injection container to all children,
 * and sets up some default dependencies.
 *
 * This is a replacement for the previous "kernel" function.
 */
var App = /** @class */ (function (_super) {
    tslib_1.__extends(App, _super);
    function App() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.setup = lodash_1.once(function (containerFromContext) {
            var isHotLoaded = containerFromContext !== null;
            var defaultContainer = new inversify_1.Container();
            var appContainer = defaultContainer.createChild();
            if (!isHotLoaded) {
                registerDefaultDependencies_1.default(defaultContainer, _this.props.name);
            }
            else {
                defaultContainer.parent = containerFromContext;
                registerSwidgetDependencies_1.default(defaultContainer, _this.props.name);
            }
            _this.useChildrenAsDefaultRouteIfNotSet(defaultContainer);
            if (_this.props.init) {
                var custom = _this.props.init(appContainer);
                // LEGACY: we need this as the container passed to kernel() in the init func
                // returns a custom container - this should not be done in new apps and is deprecated
                if (custom && custom !== appContainer) {
                    return custom;
                }
            }
            return appContainer;
        });
        /**
         * When a swidget does not register routes, we use its children as default route
         */
        _this.useChildrenAsDefaultRouteIfNotSet = function (container) {
            container.bind(serviceIds_1.default.routes).toDynamicValue(function () { return [
                {
                    component: _this.props.children,
                    name: 'home',
                    pattern: '/',
                },
            ]; });
        };
        return _this;
    }
    App.prototype.render = function () {
        var _this = this;
        return (React.createElement(diContext_1.diContext.Consumer, null, function (containerFromContext) {
            var container = _this.setup(containerFromContext);
            return (React.createElement(diContext_1.diContext.Provider, { value: container },
                React.createElement(Provider_1.ConfigProvider, { config: _this.props.config },
                    React.createElement(Provider_2.default, null,
                        React.createElement(IntlProviderWrapper_1.default, null, _this.props.children)))));
        }));
    };
    return App;
}(React.Component));
exports.App = App;
//# sourceMappingURL=App.js.map