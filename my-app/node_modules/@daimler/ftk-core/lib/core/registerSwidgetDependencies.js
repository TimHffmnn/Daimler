"use strict";
// SPDX-License-Identifier: MIT
// Copyright (c) 2020 Daimler TSS GmbH
Object.defineProperty(exports, "__esModule", { value: true });
var RouterService_1 = require("../router/lib/RouterService");
var NestedRouterStrategy_1 = require("../router/lib/urlFormatStrategy/NestedRouterStrategy");
var serviceIds_1 = require("./serviceIds");
/**
 * A swidget is mounted in a react subtree of the host WebApp and uses the DI container hierarchy
 * of the host. Thus, most dependencies are already registered and we only need to overwrite some
 * dependencies/values unique to the swidget.
 */
function registerSwidgetDependencies(container, swidgetName) {
    container.bind(serviceIds_1.default.name).toConstantValue(swidgetName);
    container.bind(serviceIds_1.default.currentSwidget.isHotLoaded).toConstantValue(true);
    container.bind(serviceIds_1.default.routerUrlFormatStrategy).toDynamicValue(function (diContext) {
        var router = diContext.container.get(RouterService_1.RouterService);
        // we will only have a uniqueId if we were loaded via the <SwidgetLoader /> component!
        var uniqueId = diContext.container.isBound(serviceIds_1.default.currentSwidget.uniqueId)
            ? diContext.container.get(serviceIds_1.default.currentSwidget.uniqueId)
            : '';
        return new NestedRouterStrategy_1.default(router.getRoute().name + "_" + name + uniqueId, router.getRoute().url);
    });
}
exports.default = registerSwidgetDependencies;
//# sourceMappingURL=registerSwidgetDependencies.js.map