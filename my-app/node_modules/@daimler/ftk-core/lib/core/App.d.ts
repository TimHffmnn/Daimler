import * as React from 'react';
import { IConfigData, IDiContainer } from '..';
export interface IAppProps {
    /**
     * A name for the app. This is i.e. used in interconnection where we communicate between
     * different nested Apps ("swidgets") and can use the name to determine the
     * sending/receiving swidget.
     */
    name: string;
    /**
     * We allow an init function to be passed. The passed container already contains the default
     * dependencies in its parent container, so those can be overridden.
     */
    init?: (container: IDiContainer) => void | IDiContainer;
    /**
     * Configuration to be passed. If non is given, the default configuration will be used.
     * If given, the default configuration will be merged with the given configuration object
     * using lodash's recursive merge(). If the App is loaded as a swidget, the
     * configuration from the parent host will be merged with the given config object.
     */
    config?: IConfigData;
}
/**
 * Main entry point to a WebApp. Binds a new dependency injection container to all children,
 * and sets up some default dependencies.
 *
 * This is a replacement for the previous "kernel" function.
 */
export declare class App extends React.Component<IAppProps, {}> {
    private setup;
    render(): JSX.Element;
    /**
     * When a swidget does not register routes, we use its children as default route
     */
    private useChildrenAsDefaultRouteIfNotSet;
}
