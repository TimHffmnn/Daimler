"use strict";
// SPDX-License-Identifier: MIT
// Copyright (c) 2020 Daimler TSS GmbH
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var lodash_1 = require("lodash");
var React = require("react");
var serviceIds_1 = require("../../core/serviceIds");
var BindToDi_1 = require("../../di/component/BindToDi");
var inject_1 = require("../../di/hoc/inject");
var withInject_1 = require("../../di/hoc/withInject");
var assetResolver_1 = require("../lib/assetResolver");
var ComponentLoader_1 = require("../lib/ComponentLoader");
var SwidgetLoader = /** @class */ (function (_super) {
    tslib_1.__extends(SwidgetLoader, _super);
    function SwidgetLoader() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {};
        _this.prerenderSetup = lodash_1.once(function () {
            var _a = _this.props, name = _a.name, url = _a.url;
            return _this.componentLoader
                .load({ name: name, url: url })
                .then(function (swidget) {
                _this.setState({ swidget: swidget });
            })
                .catch(function (err) {
                _this.handleError(err);
            });
        });
        _this.handleError = function (error) {
            if (typeof _this.props.errorFallback === 'function') {
                var fallbackComponent = _this.props.errorFallback(error);
                _this.setState({ fallbackComponent: fallbackComponent });
            }
            else {
                _this.setState({ fallbackComponent: "Error loading Swidget: " + error.toString() });
            }
        };
        return _this;
    }
    SwidgetLoader.prototype.render = function () {
        var _this = this;
        // this will produce a warning in dev mode that we should not update state in render()
        // however there is no way around in currently?
        this.prerenderSetup();
        if (this.state.fallbackComponent) {
            return this.state.fallbackComponent;
        }
        else if (!this.state.swidget) {
            return this.props.loadingPlaceholder || null;
        }
        var Swidget = this.state.swidget;
        var baseUrl = window.location.href;
        var url = new URL(this.props.url, baseUrl);
        return (React.createElement(BindToDi_1.default, { services: function (container) {
                container.bind(serviceIds_1.default.currentSwidget.url).toConstantValue(url);
                container.bind(serviceIds_1.default.currentSwidget.assetResolver).toConstantValue(assetResolver_1.getDefaultAssetResolver(url));
                container.bind(serviceIds_1.default.currentSwidget.uniqueId).toConstantValue(_this.props.uniqueId);
            } },
            React.createElement(Swidget, tslib_1.__assign({}, this.props.props))));
    };
    tslib_1.__decorate([
        inject_1.default(),
        tslib_1.__metadata("design:type", ComponentLoader_1.default)
    ], SwidgetLoader.prototype, "componentLoader", void 0);
    return SwidgetLoader;
}(React.Component));
exports.default = withInject_1.default(SwidgetLoader);
//# sourceMappingURL=SwidgetLoader.js.map